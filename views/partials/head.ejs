<head>
    <title>Victorian Household Waste Recycling</title>
    <script src="https://kit.fontawesome.com/f77ac44772.js" crossorigin="anonymous"></script> <!--Font Awesome icons-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="https://d3js.org/d3.v6.js"></script> <!--D3-->
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.css' rel='stylesheet' />

    <script type="text/javascript">

        // all data from the database
        let items_table = <%-JSON.stringify(ejs_items)%>;
        let local_govs_table = <%-JSON.stringify(ejs_govs)%>
        let trends_table = <%-JSON.stringify(ejs_trends)%>
        let centres_table = <%-JSON.stringify(ejs_centres)%>

        // log to console
        console.log(items_table);
        console.log(local_govs_table);
        console.log(trends_table);
        console.log(centres_table);

        // globals
        let item = "Aluminium Cans";
        let streamState = "bottom";
        let stackState = d3.stackOffsetNone;

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {

            // create dropdown list
            let dropHeader = document.getElementById("dropHeader");

            // loop to add button
            for (let item in items_table){

                let listItem = document.createElement("a");
                listItem.className = "dropdown-item";
                listItem.href = "#";
                listItem.innerHTML = items_table[item]["item_name"];
                dropHeader.append(listItem);
            }

            // event listeners
            document.getElementById("dropHeader").addEventListener("click", toggleItems);
            document.getElementById("container-landing").addEventListener("click", showFeature);
            document.getElementById("container-calculator").addEventListener("click", showLanding);
            document.getElementById("container-trends").addEventListener("click", showLanding);
            document.getElementById("container-map").addEventListener("click", showLanding);

            // hide map box container
            document.getElementById("container-map").style.display = "none";

        }, false);

        // show feature from tile click (rushed click handling)
        function showFeature(event){
            if(event.target.classList.contains("feature")){
               if(event.target.classList.contains("calc")){
                // hide landing
                document.getElementById("container-landing").style.display = "none";
                
                // transition calculator
                document.getElementById("container-calculator").style.display = "block";
                document.getElementById("container-calculator").style.opacity = 0;
                d3.select("#container-calculator").transition().duration(1000).style("opacity", 1);

               }
               else if(event.target.classList.contains("rec")){
                // hide landing
                document.getElementById("container-landing").style.display = "none";

                // transition map
                document.getElementById("container-map").style.display = "block";
                document.getElementById("container-map").style.opacity = 0;
                d3.select("#container-map").transition().duration(1000).style("opacity", 1);


               }
               else if(event.target.classList.contains("perf")){
                
                // hide landing
                document.getElementById("container-landing").style.display = "none";

                // draw graph
                document.getElementById("container-trends").style.display = "block";
                draw_graph();

                // transition graph
                document.getElementById("container-trends").style.opacity = 0;
                d3.select("#container-trends").transition().duration(1000).style("opacity", 1);
               }
            };
        }

        // show the landing page (from back button)
        function showLanding(event){
            if(event.target.classList.contains("back")){
                // hide calculator, graph, map
                document.getElementById("container-calculator").style.display = "none";
                document.getElementById("container-trends").style.display = "none";
                document.getElementById("container-map").style.display = "none";

                // transition calculator
                document.getElementById("container-landing").style.display = "block";
                document.getElementById("container-landing").style.opacity = 0;
                d3.select("#container-landing").transition().duration(1000).style("opacity", 1);

            }
        }

        // change item
        function toggleItems(event){
            item = event.target.innerHTML;

            // update dropdown button
            let dropHeader = document.getElementById("dropdownMenuButton");
            dropHeader.innerHTML = item;
        }

        // hover highlight
        function highlightTile(el){
            el.style.opacity = 1;
        }

        function highlightOut(el){
            el.style.opacity = 0.7;
        }

        // create display list
        function displayCalcBoot(){
            let displayArea = document.getElementById("display");
            let inputArea = document.getElementById("inputArea");
            let inputValue = inputArea.value;
            
            // find index of item in table
            let tableIndex = 0;
            for(let indexNumber in items_table){
                if(items_table[indexNumber]["item_name"] == item){
                    tableIndex = indexNumber;
                }
            }

            // remove elements in display area
            while (displayArea.hasChildNodes()) {
                displayArea.removeChild(displayArea.firstChild);
            }

            // create list
            var ul_el = document.createElement("ul");
            ul_el.className = "list-group";
            
            // create list items
            if(isNaN(inputValue)){ // not a number
                let li_e = document.createElement("li");
                li_e.className = "list-group-item";
                li_e.innerHTML = "Please enter a positive number";
                ul_el.append(li_e);

            }
            else if(inputValue < 0){ // negative number
                let li_e = document.createElement("li");
                li_e.className = "list-group-item";
                li_e.innerHTML = "Please enter a positive number";
                ul_el.append(li_e);

            }
            else{ 
                // get attributes
                let gigaj = Number((inputValue/items_table[tableIndex]["energy_saved_gj"]).toFixed(5));
                let co2 = Number((inputValue/items_table[tableIndex]["total_co2_tonnes"]).toFixed(5));
                let cars = Number((inputValue/items_table[tableIndex]["equivalent_cars"]).toFixed(5));
                let trees = Number((inputValue/items_table[tableIndex]["equivalent_trees"]).toFixed(5));
                let distance = Number((inputValue/items_table[tableIndex]["distance_driven"]).toFixed(5));
                let tv = Number((inputValue/items_table[tableIndex]["tv_days"]).toFixed(5));

                
                // header
                let displayStringHead = "<strong>Recycling " + inputValue + " tonnes of " + item +  "</strong>";
                let li_h = document.createElement("li");
                li_h.className = "list-group-item";
                li_h.innerHTML = displayStringHead;
                ul_el.append(li_h);

                // energy
                let displayStringEnergy = "Saves " + gigaj + " GigaJoules of Energy which ...";
                let li_e = document.createElement("li");
                li_e.className = "list-group-item";
                li_e.innerHTML = displayStringEnergy;
                ul_el.append(li_e);

                // co2
                let displayStringCarbon = "Is equivalent to " + co2 + " tonnes of co2";
                let li_co2 = document.createElement("li");
                li_co2.className = "list-group-item";
                li_co2.innerHTML = displayStringCarbon;
                ul_el.append(li_co2);

                // cars
                let displayStringCars = "Is equivalent to " + cars + " cars off the road";
                let li_c = document.createElement("li");
                li_c.className = "list-group-item";
                li_c.innerHTML = displayStringCars;
                ul_el.append(li_c);

                // trees
                let displayStringTrees = "Is equivalent to " + trees + " trees planted for carbon absorption";
                let li_t = document.createElement("li");
                li_t.className = "list-group-item";
                li_t.innerHTML = displayStringTrees;
                ul_el.append(li_t);

                // driven days
                let displayStringDist = "Is equivalent to " + tv + " days watching a large TV";
                let li_v = document.createElement("li");
                li_v.className = "list-group-item";
                li_v.innerHTML = displayStringDist;
                ul_el.append(li_v);

                // driven days
                let displayStringTV = "Is equivalent to " + distance + " kms driven in a family car";
                let li_d = document.createElement("li");
                li_d.className = "list-group-item";
                li_d.innerHTML = displayStringTV;
                ul_el.append(li_d);
            }
            displayArea.append(ul_el);
            displayArea.style.opacity = 0;
            d3.select("#display").transition().duration(1000).style("opacity", 1);

        }

        // plot the graph
        function draw_graph(){

            // get width and height of plot area
            var plot_area = document.getElementById("plot_chart");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            console.log(plot_area);
            console.log(plot_area.offsetHeight);
            console.log(plot_area.offsetWidth);

            // set the dimensions and margins of the plot 
            var margin = {top: 10, 
                          right: 40, 
                          bottom: 40, 
                          left: 40};
            
            // chart width and height (leaving names from old code)
            var lineChartWidth = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;
            
            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // append the svg object to the plot area
            var svg = d3.select("#plot_chart")
            .append("svg")
                .attr("width", plot_width)
                .attr("height", plot_height)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // background
            svg.
            append("rect")
                .attr("id", "backLine")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("fill", "black")
                .attr("x",0)
                .attr("y",0);

            // define a clipPath: everything out of this area won't be drawn (else draws in margin)
            svg.append("defs").append("svg:clipPath")
                .attr("id", "clipStream") 
                .append("svg:rect")
                .attr("width", lineChartWidth)
                .attr("height", height)
                .attr("x",0)
                .attr("y",0);

            // add the clip path
            var all_streams = svg.append('g')
                .attr("clip-path", "url(#clipStream)");

            // create d3 data structure
            var d3_data = [];
            
            // no js date yet (FIX: missing first)
            var new_row = {"date":trends_table[0]["reference_year"]};
            var allKeys = [];
            for(let i in trends_table){
                if(new_row["date"] == trends_table[i]["reference_year"]){
                    new_row[trends_table[i]["metro_zone"]] = trends_table[i]["diversion_rate"];
                    allKeys.push(trends_table[i]["metro_zone"]);
                }
                else{
                    d3_data.push(new_row);
                    new_row = {"date":trends_table[i]["reference_year"]};
                    new_row[trends_table[i]["metro_zone"]] = trends_table[i]["diversion_rate"];
                }
            }
            
            // stackKeys
            let stackKeys = [...new Set(allKeys)];
            console.log(stackKeys);
            console.log(d3_data);
            
            // x scale
            const xScale = d3.scaleLinear()
                .domain([2002, 2019])
                .range([ 0, lineChartWidth]);

            // y scale 
            if(streamState == "bottom"){
                var yScale = d3.scaleLinear()
                    .domain([0, 4]) 
                    .range([height, 0]);
            }
            else{
                var yScale = d3.scaleLinear()
                    .domain([0, 1]) 
                    .range([height, 0]);
            }

            // color palettes by chatgpt!!!!

            // blues ["#0074D9", "#3D85C6", "#4A90E2", "#2B9EB3", "#00BFFF", "#1E90FF", "#6495ED"]
            // categories1 ["#FF4136", "#FF851B", "#FFDC00", "#2ECC40", "#0074D9", "#B10DC9", "#F012BE"]
            // yellowsreds ["#FFD700", "#FFFF00", "#FF6347", "#FF7F50", "#FFC300", "#FFA500", "#DC143C"]
            // pastels ["#FFB6C1", "#87CEEB", "#B0E0E6", "#98FB98", "#FFDAB9", "#FFC0CB", "#DDA0DD"]


            const colour = d3.scaleOrdinal()
                .domain(stackKeys) // chatgpt color scheme!
                .range(["#0074D9", "#3D85C6", "#4A90E2", "#2B9EB3", "#00BFFF", "#1E90FF", "#6495ED"]);

            // create stacked areas
            var stackedData = d3.stack()
            .offset(stackState)
            .order(d3.stackOrderNone)
            .keys(stackKeys);

            var stack = stackedData(d3_data);

            var area = d3.area().curve(d3.curveLinear) //d3.curveBasis
                    .x(function(d) { return xScale(d.data.date);})
                    .y0(function(d) { return yScale(d[0]);})
                    .y1(function(d) { return yScale(d[1]);});

            // plot the streams
            all_streams
            .selectAll("layers")
            .data(stack)
            .enter()
            .append("path")
            .attr("class", "streams")
            .style("fill", function(d) { return colour(d.key); })
            .style("fill-opacity", 0.5)
            .style("stroke", function(d) { return colour(d.key); })
            .style("stroke-opacity", 0.8)
            .style("stroke-width", 0.5)
            .style("cursor", "pointer")
            .on("mouseover", function(event, d){
                // text location boundaries
                var x = event.layerX;
                var y = event.layerY;
                var anchor = "middle"; 
                if(x >= lineChartWidth -100){
                    x = lineChartWidth - 200;
                    anchor = "start";
                };
                if(x <= 150){
                    x = x + 150;
                }
                if(y >= height -100){
                    y = height - 100;
                }
                
                // add text (name)
                all_streams.append("text")
                .attr("class", "hover-text")
                .attr("x", x)
                .attr("y", y)
                .attr("dy", "1em")
                .attr("font-size", "1em")
                .attr("fill", "white")
                .attr("stroke", "white")
                .style("text-anchor", anchor)
                .style("text-shadow", "0.1vh 0.1vh gray")
                .text(d.key);


                // highlight
                d3.selectAll(".streams").style("opacity", function(e){
                    if(e.key == d.key){return 1;}
                    return 0.1;
                });
                
            })
            .on("mouseout", function(event, d){
                d3.selectAll(".streams").style("opacity", 1);
                d3.selectAll(".hover-text").remove();
            })
            .on("click", function(event, d){
                if(streamState == "bottom"){
                    streamState = "expand";
                    stackState = d3.stackOffsetExpand;
                    yScale = d3.scaleLinear()
                    .domain([0, 1]) 
                    .range([height, 0]);
                }
                else{
                    streamState = "bottom";
                    stackState = d3.stackOffsetNone;
                    yScale = d3.scaleLinear()
                    .domain([0, 4]) 
                    .range([height, 0]);
                }

                // create stacked areas
                stackedData = d3.stack()
                .offset(stackState)
                .order(d3.stackOrderNone)
                .keys(stackKeys);

                stack = stackedData(d3_data);

                all_streams
                .selectAll('.streams')
                .data(stack)
                .transition()
                .duration(1000)
                .attr("d", area);
                
            })
            .attr("d", area);

            // x-axis
            var x_axis = d3.axisBottom().scale(xScale)
                .tickSize(10)
                .ticks(6)
                .tickFormat(d => d)
                .tickSizeOuter(0);

            // x-axis append (bottom)
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("class", "axes")
                .call(x_axis);

            // y-axis
            //svg.append("g")
            //.attr("class", "axes")
                //.call(d3.axisLeft(yScale));
            
        }

        

    </script>
</head>